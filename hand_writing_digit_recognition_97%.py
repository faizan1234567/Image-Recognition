# -*- coding: utf-8 -*-
"""Untitled55.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XtmUGfcSkqOXdxl8YdpOfaK7JK8hlnzh
"""

#handwritting digits classification problem

"""#handwritting digits classification problem
in this notebook, mnist handwriting data will be downloaded, preprocessed, trained, and evaluated on test set. This dataset contains images of hand writing digits from 0-9.
"""

import tensorflow as tf
print(tf.__version__)

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras

# loading datset

hand_writing_digits = keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels) = hand_writing_digits.load_data()

#checking the dataset
plt.imshow(train_images[3])
print(train_labels[3])

print(train_images[3])

#normalizing the data
x_train, x_test = train_images/255.0, test_images/255.0

class mycallback(keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs = {}):
    if(logs.get('accuracy') is not None and logs.get('accuracy')>0.99):
      print('\nReached 99% Accuracy, stop training')
      self.model.stop_training = True
  


model = keras.Sequential([keras.layers.Flatten(),
                          keras.layers.Dense(256, activation = 'relu'),
                          keras.layers.Dense(128, activation = 'relu'),
                          keras.layers.Dense(64, activation = 'relu'),
                          keras.layers.Dense(10, activation= 'softmax')])

model.compile(optimizer = 'adam', 
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])
callbacks = mycallback()

model.fit(x_train, train_labels, epochs = 10, callbacks=[callbacks])

model.evaluate(x_test, test_labels)

classifications = model.predict(x_test)

x = 3784

print(tf.argmax(classifications[x]))
print(test_labels[x])

